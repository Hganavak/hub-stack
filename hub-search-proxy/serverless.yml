service: hub-search-proxy
custom:
  bucketBaseName: serverless-shared-bucket
  ResearchHub: ${self:service}
  BusinessService: Faculty of Science
  Department: Centre for eResearch
  ProjectCode: N/A
  WikiLink: N/A
  Application: ${self:service}
  CostCentre: N/A
  Faculty: Science
  customDomain:
    domainName: ${file(env/${self:provider.stage}.json):infra.awsApiGatewayCustomDomainName}
    basePath: ${self:service}
    stage: ${self:provider.stage}
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'} # Deploy with sls deploy --stage STAGE (default dev)
  region: ap-southeast-2
  endpointType: regional
  role: arn:aws:iam::${file(env/${self:provider.stage}.json):awsAccountId}:${file(env/${self:provider.stage}.json):lambdaRole}
  tags:
    ResearchHub: ${self:custom.ResearchHub}
    BusinessService: ${self:custom.BusinessService}
    Department: ${self:custom.Department}
    ProjectCode: ${self:custom.ProjectCode}
    WikiLink: ${self:custom.WikiLink}
    Application: ${self:custom.Application}
    CostCentre: ${self:custom.CostCentre}
    Faculty: ${self:custom.Faculty}
  stackTags:
    ResearchHub: ${self:custom.ResearchHub}
    BusinessService: ${self:custom.BusinessService}
    Department: ${self:custom.Department}
    ProjectCode: ${self:custom.ProjectCode}
    WikiLink: ${self:custom.WikiLink}
    Application: ${self:custom.Application}
    CostCentre: ${self:custom.CostCentre}
    Faculty: ${self:custom.Faculty}
  deploymentBucket:
    name: ${self:custom.bucketBaseName}-${self:provider.stage}
  environment:
    # Environment variables available to all functions in this service
    LEVEL: INFO
    # ELASTICSEARCH_API_KEY: ${file(env/${self:provider.stage}.json):ELASTICSEARCH_API_KEY}
    ELASTICSEARCH_ENDPOINT: ${file(env/${self:provider.stage}.json):ELASTICSEARCH_ENDPOINT}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource:
        - arn:
          Fn::Join:
            - ":"
            - - arn
              - aws
              - ssm:${self:provider.region}
              - ${file(env/${self:provider.stage}.json):awsAccountId}
              - parameter/${self:provider.stage}/research-hub/*
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource:
        - arn:
          Fn::Join:
            - ":"
            - - arn
              - aws
              - kms
              - ${self:provider.region}
              - ${file(env/${self:provider.stage}.json):awsAccountId}
              - ${file(env/${self:provider.stage}.json):resourceKey}
    - Effect: Allow
      Action:
        - es:ESHttpGet
        - es:ESHttpPost
      Resource:
        - arn:
          Fn::Join:
            - ":"
            - - arn
              - aws
              - es
              - ${self:provider.region}
              - ${file(env/${self:provider.stage}.json):awsAccountId}
              - domain/*
package:
  exclude:
    - .git/**
    - .vscode/*
    - events/*
    - node_modules/**
    - "!node_modules/@uoa/**"
    - "!node_modules/uuid/**"
functions:
  hub-search-proxy:
    handler: handler.main
    events:
      - http:
          path: /
          method: post
          cors: true
plugins:
  - serverless-offline
  - serverless-mocha-plugin
  - serverless-domain-manager

# resources:
#   Resources:
#     myDefaultRole:
#       Type: "AWS::IAM::Role"
#       Properties:
#         Path: /
#         RoleName: ${self:service}-lambda-role
#         AssumeRolePolicyDocument:
#           Version: "2012-10-17"
#           Statement:
#             - Effect: Allow
#               Principal:
#                 Service:
#                   - lambda.amazonaws.com
#               Action: "sts:AssumeRole"
#         ManagedPolicyArns:
#           - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
#         Policies:
#           - PolicyName: myPolicyName
#             PolicyDocument:
#               Version: "2012-10-17"
#               Statement:
#                 - Effect: Allow
#                   Action:
#                     - "logs:CreateLogGroup"
#                     - "logs:CreateLogStream"
#                     - "logs:PutLogEvents"
#                   Resource:
#                     - "Fn::Join":
#                         - ":"
#                         - - "arn:aws:logs"
#                           - Ref: "AWS::Region"
#                           - Ref: "AWS::AccountId"
#                           - "log-group:/aws/lambda/*:*:*"
#                 - Effect: Allow
#                   Action:
#                     - ssm:GetParameter
#                     - ssm:GetParameters
#                   Resource:
#                     - "Fn::Join":
#                         - ":"
#                         - - "arn:aws:ssm"
#                           - Ref: "AWS::Region"
#                           - Ref: "AWS::AccountId"
#                           - "parameter/${self:provider.stage}/research-hub/*"
#                 - Effect: Allow
#                   Action:
#                     - kms:Decrypt
#                   Resource:
#                     - "Fn::Join":
#                         - ":"
#                         - - "arn:aws:kms"
#                           - Ref: "AWS::Region"
#                           - Ref: "AWS::AccountId"
#                           - "${file(env/${self:provider.stage}.json):resourceKey"
#                 - Effect: Allow
#                   Action:
#                     - es:ESHttpGet
#                     - es:ESHttpPost
#                   Resource:
#                     - "Fn::Join":
#                         - ":"
#                         - - "arn:aws:es"
#                           - Ref: "AWS::Region"
#                           - Ref: "AWS::AccountId"
#                           - "domain/*"